import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.CsvReportRenderer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.render.TextReportRenderer

plugins {
  id 'idea'
  id 'com.bmuschko.docker-remote-api' version '6.4.0' apply false
  id 'com.github.jk1.dependency-license-report' version '1.11'
  id "com.gorylenko.gradle-git-properties" version "2.2.0"
  id 'maven-publish'
}

ext {
  registryInsecure = project.hasProperty("registryInsecure")
  registryUrl = project.hasProperty("registryUrl") ? project.getProperty("registryUrl") : System.getenv("DOCKER_URL")
  registryUsername = project.hasProperty("registryUsername") ? project.getProperty("registryUsername") : System.getenv("DOCKER_USERNAME")
  registryPassword = project.hasProperty("registryPassword") ? project.getProperty("registryPassword") : System.getenv("DOCKER_PASSWORD")

  println "registryUrl=$registryUrl"
  println "registryInsecure=$registryInsecure"
  println "registryUsername=$registryUsername"

  repoUsername = project.hasProperty("repoUsername") ? project.getProperty("repoUsername") : System.getenv("NEXUS_USERNAME")
  repoPassword = project.hasProperty("repoPassword") ? project.getProperty("repoPassword") : System.getenv("NEXUS_PASSWORD")
  println "repoUsername=$repoUsername"
}

configure(subprojects.findAll { it.name.contains("docker") }) {
  apply plugin: 'com.bmuschko.docker-remote-api'
  docker {

    registryCredentials {
      url = registryUrl
      //username = registryUsername
      //password = registryPassword
    }
  }
}

def getGitCommitHash = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

ext.gitCommitHash = getGitCommitHash()
ext.latestElassandraVersion = (new File("${rootDir}/docker/supportedElassandraVersions.txt") as String[])[0]
if (!ext.javaElassandraVersion) {
  // the elassandra version used to build k8s-addons (seedProvider, config loader...)
  ext.javaElassandraVersion = ext.latestElassandraVersion
}

licenseReport {
  renderers = [new CsvReportRenderer(separator:';'), new TextReportRenderer(), new InventoryHtmlReportRenderer('index.html', 'Strapkop License Report')]
  filters = [new LicenseBundleNormalizer(bundlePath: rootProject.file('license-normalizer-bundle.json'))]
  projects = [project] + project.subprojects
  excludes = [  ]
}


task prepareDependenciesSources(type:Exec) {
  // download the source code of the thirdparty libraries under GPL & LGPL license
  commandLine './download-sources.sh', 'sources-url.csv'
}

task dockerBuild {
  dependsOn 'prepareDependenciesSources'
  dependsOn ':java:operator:jibDockerBuild'
  dependsOn ':docker:dockerBuildImage'
}

task dockerPush {
  dependsOn ':dockerBuild'
  dependsOn ':docker:dockerPushImage'
  dependsOn ':java:operator:jib'
  dependsOn ':reaper:pushReaper'
}

task dockerBuildAllVersions {
  dependsOn ':java:operator:jibDockerBuild'
  dependsOn ':docker:dockerBuildAllVersions'
}

task dockerPushAllVersions {
  dependsOn ':java:operator:jib'
  dependsOn ':docker:dockerPushAllVersions'
}

// see storage account -> access keys for connectionString
task uploadLicenseReport(type: com.strapdata.gradle.AzureStorageDeployTask) {
  dependsOn generateLicenseReport
  connectionString ***REMOVED***
  container 'strapkop'
  fileToDeploy 'build/reports/dependency-license/index.html'
  mimeType 'text/html'
}

task uploadLicenseNotices(type: com.strapdata.gradle.AzureStorageDeployTask) {
  dependsOn generateLicenseReport
  connectionString ***REMOVED***
  container 'strapkop'
  fileToDeploy 'build/reports/dependency-license/THIRD-PARTY-NOTICES.txt'
  mimeType 'text/plain'
}