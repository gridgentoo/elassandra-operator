# Default values for elassandra.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicas: 1
autoScaleMode: "MANUAL"
parked: false

# STRICT or SLACK
nodeAffinityPolicy: STRICT

image:
  elassandraRepository: strapdata.azurecr.io/strapdata/elassandra-node-dev
  tag: 6.8.4.3
  pullPolicy: Always
  pullSecrets: []

resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    cpu: 2000m
    memory: 2Gi

dataVolumeClaim:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi

externalDns:
  enabled: false
  root: "xxx"
  domain: "example.com"
  ttl: 300

kibana:
  enabled: true
  image: "docker.elastic.co/kibana/kibana-oss"
  ingressSuffix:
  #tag: 6.8.4
  #version: 1
  spaces:
    - name: ""
      keyspaces: []

reaper:
  image: strapdata.azurecr.io/strapdata/cassandra-reaper:2.0.2
  enabled: true
  ingressSuffix:

# Tell Cassandra to use the local IP address (INTERNAL_IP).
snitchPreferLocal: false

managedKeyspaces: {}
#  - keyspace: gravitee
#    rf: 3
#    role: gravitee
#    login: true
#    superuser: false
#    secretKey: gravitee
#    grantStatements:
#      - "GRANT gravitee TO gravitee"

# WebHook URL called when datacenter is reconcilied or deleted.
# URL template support {namespace}, {clusterName}, {datacenterName}, {phase}, {replicas}, {readyReplicas}
webHookUrl:

# TODO: we do not support unprivileged setup yet
privilegedSupported: true

# PVC delete policy, KEEP_PVC or DELETE_PVC
decommissionPolicy: "DELETE_PVC"

computeJvmMemorySettings: true

enterprise:
  enabled: true
  jmx: true
  https: true
  ssl: true
  aaa:
    enabled: true
    audit: true
  cbs: true

# Elassandra datacenter.group
#datacenterGroup:

#Example authentication for AWS S3 based backups
#env:
#  - name: AWS_ACCESS_KEY_ID
#    valueFrom:
#      secretKeyRef:
#        name: awsbackuptest
#        key: access
#  - name: AWS_SECRET_ACCESS_KEY
#    valueFrom:
#      secretKeyRef:
#        name: awsbackuptest
#        key: secret
#  - name: AWS_REGION
#    value: "us-west-2"

#Example authentication for AWS GCP based backups
#env:
#  - name: GOOGLE_APPLICATION_CREDENTIALS
#    value: "/tmp/user-config/service_key.json"
#  - name: GOOGLE_CLOUD_PROJECT
#    value: "elassandra-operator"
#  - name: BUCKET_NAME
#    value: "my-bucket"
#

# Custom configmap that defines the ConfigMap key (relative to /etc/cassandra) -> path mappings.
# Example:
# userConfigMapVolumeSource:
#   name: concurrent-data
#   items:
#   - key: 100-concurrent-yaml
#     path: cassandra.yaml.d/100-concurrent.yaml

## Example GCP ConfigMap
#apiVersion: extensions/v1beta1
#kind: ConfigMap
#metadata:
#  name: configMapReference
#data:
#  service_key.json: "XXXXXXXXX"

prometheusEnabled: true

elasticsearchEnabled: true
elasticsearchIngressEnabled: false
elasticsearchLoadBalancerIp:

elasticsearchPort: 9200
elasticsearchTransportPort: 9300
elasticsearchLoadBalancerEnabled: true


ssl: true
authentication: CASSANDRA

hostPortEnabled: true
hostNetworkEnabled: true

nativePort: 39042
storagePort: 37000
sslStoragePort: 37001

jdbPort: 4242

# JMXMP is mandatory
jmxPort: 7199
jmxmpEnabled: true
jmxmpOverSSL: true

remoteSeeds: []
remoteSeeders:

# Override some config files in /etc/cassandra
configs:
  logback.xml: |-
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration scan="true" debug="false">
    <jmxConfigurator />
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${CASSANDRA_LOGDIR}/system.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
    <fileNamePattern>${CASSANDRA_LOGDIR}/system.log.%i.zip</fileNamePattern>
    <minIndex>1</minIndex>
    <maxIndex>20</maxIndex>
    </rollingPolicy>

    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
    <maxFileSize>500MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
    <pattern>%date{ISO8601} %-5level [%thread] %F:%L %M %msg%n</pattern>
    <!-- old-style log format
    <pattern>%5level [%thread] %date{ISO8601} %F (line %L) %msg%n</pattern>
    -->
    </encoder>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
    <pattern>%date{ISO8601} %-5level [%thread] %C.%M:%L %msg%n</pattern>
    </encoder>
    </appender>

    <appender name="AUDIT" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${CASSANDRA_LOGDIR}/audit.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
    <fileNamePattern>${CASSANDRA_LOGDIR}/audit.log.%i.zip</fileNamePattern>
    <minIndex>1</minIndex>
    <maxIndex>20</maxIndex>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
    <maxFileSize>500MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
    <pattern>%date{ISO8601} %msg%n</pattern>
    </encoder>
    </appender>

    <logger name="com.thinkaurelius.thrift" level="ERROR"/>
    <logger name="org.apache" level="WARN" />

    <!-- Use env variables to customize logging level from docker -->
    <logger name="org.apache.cassandra" level="${LOGBACK_org_apache_cassandra:-WARN}" />
    <logger name="org.apache.cassandra.service.CassandraDaemon" level="${LOGBACK_org_apache_cassandra_service_CassandraDaemon:-INFO}" />

    <logger name="org.elassandra.shard" level="${LOGBACK_org_elassandra_shard:-INFO}" />
    <logger name="org.elassandra.indices" level="${LOGBACK_org_elassandra_indices:-INFO}" />
    <logger name="org.elassandra.index" level="${LOGBACK_org_elassandra_index:-WARN}" />
    <logger name="org.elassandra.discovery" level="${LOGBACK_org_elassandra_discovery:-WARN}" />
    <logger name="org.elasticsearch.cluster.service" level="${LOGBACK_org_elassandra_cluster_service:-DEBUG}" />
    <logger name="org.elasticsearch.cluster.metadata" level="DEBUG" />
    <logger name="org.elasticsearch" level="${LOGBACK_org_elasticsearch:-WARN}" />

    <root level="INFO">
      <appender-ref ref="STDOUT" />
    </root>

    <logger name="LogbackAuditor" level="DEBUG" additivity="false" >
       <appender-ref ref="AUDIT" />
    </logger>

    </configuration>