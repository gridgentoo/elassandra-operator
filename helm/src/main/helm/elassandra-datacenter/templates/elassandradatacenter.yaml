apiVersion: stable.strapdata.com/v1
kind: ElassandraDataCenter
metadata:
  name: {{ template "elassandra.resourceName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "elassandra.name" . }}
    chart: {{ template "elassandra.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 4 }}
{{- end }}
spec:
  clusterName: {{ include "elassandra.clusterName" . | required "Invalid clusterName : Release name has to be clustername-dcname (in lowercase), clustername must match ([0-9a-z]+)" }}
  datacenterName: {{ include "elassandra.datacenterName" . | required "Invalid datacenterName : Release name has to be clustername-dcname (in lowercase), datacenterName must match ([0-9a-z]+)" }}
  workload: {{ default "READ_WRITE" .Values.workload }}
  replicas: {{ default "1" .Values.replicas }}
  autoScaleMode: {{ default "MANUAL" .Values.autoScaleMode }}
  elassandraImage: "{{ .Values.image.elassandraRepository }}:{{ .Values.image.tag }}"
  sidecarImage: "{{ .Values.image.sidecarRepository }}:{{ .Values.image.tag }}"
  imagePullPolicy: {{ .Values.image.pullPolicy }}
  {{- if .Values.image.pullSecrets }}
  imagePullSecrets:
  {{- range $pullSecret := .Values.image.pullSecrets }}
    - {{ $pullSecret }}
  {{- end }}
  {{- end }}
  resources:
{{ toYaml .Values.resources | indent 4 }}
  dataVolumeClaim:
{{ toYaml .Values.dataVolumeClaim | indent 4 }}
{{- if .Values.env }}
  env:
{{ toYaml .Values.env | indent 4 }}
{{- end }}
{{- if .Values.restoreFromBackup }}
  restoreFromBackup:
{{ toYaml .Values.restoreFromBackup | indent 4 }}
{{- end }}
  userConfigMapVolumeSource:
    name: {{ template "elassandra.resourceName" . }}
    items:
{{- range $key, $val := .Values.configs }}
      - key: {{ $key }}
        path: {{ $key }}
{{- end }}
{{- if .Values.userConfigMapVolumeSource }}
{{ toYaml .Values.userConfigMapVolumeSource | indent 4 }}
{{- end }}
{{- if .Values.userSecretVolumeSource }}
  userSecretVolumeSource:
{{ toYaml .Values.userSecretVolumeSource | indent 4 }}
{{- end }}
  elasticsearchEnabled: {{ default "true" .Values.elasticsearchEnabled }}
  prometheusEnabled: {{ default "false" .Values.prometheusEnabled }}
{{- if .Values.reaper }}
  reaper:
    enabled: {{ default "false" .Values.reaper.enabled }}
{{- if .Values.reaper.image }}
    image: {{ .Values.reaper.image }}
{{- end }}
{{- end }}
  privilegedSupported: {{ default "false" .Values.privilegedSupported }}
  hostPortEnabled: {{ default "false" .Values.hostPortEnabled }}
  hostNetworkEnabled: {{ default "false" .Values.hostNetworkEnabled }}
  nativePort: {{ default "9042" .Values.nativePort | quote }}
  storagePort: {{ default "7000" .Values.storagePort | quote }}
  sslStoragePort: {{ default "7001" .Values.sslStoragePort | quote }}
{{- if .Values.jdbPort }}
  jdbPort: {{ .Values.jdbPort }}
{{- end }}
{{- if .Values.jmxPort }}
  jmxPort: {{ .Values.jmxPort }}
{{- end }}
  jmxmpEnabled: {{ default "false" .Values.jmxmpEnabled }}
  jmxmpOverSSL: {{ default "false" .Values.jmxmpOverSSL }}
{{- if .Values.ssl }}
  ssl:
{{ toYaml .Values.ssl | indent 4 }}
{{- end }}
{{- if .Values.authentication }}
  authentication:
{{ toYaml .Values.authentication | indent 4 }}
{{- end }}
{{- if .Values.enterprise }}
  enterprise:
{{ toYaml .Values.enterprise | indent 4 }}
{{- end }}
{{- if .Values.remoteSeeds }}
  remoteSeeds:
{{ toYaml .Values.remoteSeeds | indent 4 }}
{{- end }}
{{- if .Values.remoteSeeders }}
  remoteSeeders:
{{ toYaml .Values.remoteSeeders | indent 4 }}
{{- end }}
{{- if .Values.datacenterGroup }}
  datacenterGroup:
{{ toYaml .Values.datacenterGroup | indent 4 }}
{{- end }}
{{- if .Values.managedKeyspaces }}
  managedKeyspaces:
{{ toYaml .Values.managedKeyspaces | indent 4 }}
{{- end }}
{{- if .Values.kibana }}
  kibana:
{{- if .Values.kibana.image }}
    image: {{ .Values.kibana.image }}
{{- end }}
{{- if .Values.kibana.spaces }}
    spaces:
{{ toYaml .Values.kibana.spaces | indent 4 }}
{{- end }}
{{- end }}