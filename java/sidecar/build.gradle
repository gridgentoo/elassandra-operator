plugins {
    id 'java'
    id 'application'
    id 'com.google.cloud.tools.jib'
    id 'org.hidetake.swagger.generator' version '2.18.1'
}

mainClassName = 'com.strapdata.strapkop.sidecar.Application'

jar {
    manifest {
        attributes "Main-Class": mainClassName
    }

    zip64=true
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jib {
    from {
        // TODO make it configurable to allow bash exec ???
        //image = 'gcr.io/distroless/java:8'
        //image = 'openjdk:alpine'
        image = 'openjdk:8-jre-alpine'  // smallest jre image
        //image = 'openjdk:8u212-jre-stretch'
    }
    to {
        image = dockerImagePrefix + "sidecar" + dockerImageSuffix
        tags = [ version, project.gitCommitHash, 'latest']

        // osxkeychain does not work on linux and CI environments
        // credHelper = 'osxkeychain'

        auth {
            username = registryUsername
            password = registryPassword
        }
    }
    container {
        // to override JVM_FLAGS during deployment use : -e "JAVA_TOOL_OPTIONS=<JVM flags>"
        // see : https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-set-parameters-for-my-image-at-runtime
        jvmFlags = ['-Xmx256m',
                    '-XX:+UnlockExperimentalVMOptions',
                    '-XX:+UseCGroupMemoryLimitForHeap',
                    '-XX:MaxRAMFraction=2',
                    '-XX:+ExitOnOutOfMemoryError',
                    '-XshowSettings:vm',
                    '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005',
                    /*
                    '-Dcom.sun.management.jmxremote',
                    '-Dcom.sun.management.jmxremote.port=7199',
                    '-Dcom.sun.management.jmxremote.rmi.port=7199',
                    '-Dcom.sun.management.jmxremote.ssl=false',
                    '-Dcom.sun.management.jmxremote.authenticate=false',
                    '-Djava.rmi.server.hostname=127.0.0.1'
                     */
        ]
        mainClass = mainClassName
        ports = ['8080']
        labels = [ description:'Elassandra sidecar']
    }
    extraDirectories {
        // add the source code of the thirdparty libraries under GPL & LGPL license
        paths = ["../../build/thirdparty-libs", "../../build/reports/dependency-license"]
    }
    allowInsecureRegistries = rootProject.allowInsecureRegistries
}
tasks.jibDockerBuild.dependsOn project(':java:dns').jar
tasks.jibDockerBuild.dependsOn project(':java:backup').jar
tasks.jibDockerBuild.dependsOn project(':java:model').jar

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    // Disable ALL warnings because of use of com.sun.security.sasl.Provider (cannot be suppressed)
    options.compilerArgs = [ '-parameters', '-Xlint:none' ]
}

compileTestJava {
    options.compilerArgs += '-parameters'
}

dependencies {
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    compile "io.micronaut:micronaut-http-client"
    compile "info.picocli:picocli"
    compile "io.micronaut.configuration:micronaut-picocli"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    runtime "ch.qos.logback:logback-classic:1.2.3"

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    compile "javax.annotation:javax.annotation-api"

    compile "io.swagger.core.v3:swagger-annotations"

    compile group: 'org.glassfish.main.external', name: 'jmxremote_optional-repackaged', version: '5.0'

    compile project(':java:dns')
    compile project(':java:model')
    compile project(':java:backup')
}
