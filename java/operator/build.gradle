plugins {
    id 'java'
    id 'application'
    id 'com.google.cloud.tools.jib'
    id "com.gorylenko.gradle-git-properties"
    id 'org.hidetake.swagger.generator' version '2.18.1'
    id "de.undercouch.download" version "4.0.2"
}

mainClassName = 'com.strapdata.strapkop.Application'


jar {
    manifest {
        attributes "Main-Class": mainClassName
    }

    zip64=true
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jib {
    from {
        // TODO make it configurable to allow bash exec ???
        //image = 'openjdk:alpine'
        image = 'openjdk:8-jre-alpine'  // smallest jre image
        //image = 'gcr.io/distroless/java:8'
    }
    to {
        image = dockerImagePrefix + "operator" + dockerImageSuffix
        tags = [ version, project.gitCommitHash, 'latest']
        // osxkeychain does not work on linux and CI environments
        // credHelper = 'osxkeychain'

        auth {
            username = System.getenv('DOCKER_USERNAME')
            password = System.getenv('DOCKER_PASSWORD')
        }
    }
    container {
        // to override JVM_FLAGS during deployment use : -e "JAVA_TOOL_OPTIONS=<JVM flags>"
        // see : https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#how-do-i-set-parameters-for-my-image-at-runtime
        jvmFlags = ['-Xmx512m',
                    '-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap', '-XX:MaxRAMFraction=2',
                    '-XX:+ExitOnOutOfMemoryError',
                    '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005',
                    '-Dmicronaut.environments=$MICRONAUT_ENV',
                    '-XshowSettings:vm'
        ]
        mainClass = mainClassName
        ports = ['8080']
        labels = [ description:'Strapkop Elassandra operator for K8S' ]
    }
    extraDirectories {
        // add the source code of the thirdparty libraries under GPL & LGPL license
        paths = ["../../build/thirdparty-libs", "../../build/reports/dependency-license"]
    }
    allowInsecureRegistries = rootProject.allowInsecureRegistries
}
tasks.jibDockerBuild.dependsOn project(':java:backup').jar
tasks.jibDockerBuild.dependsOn project(':java:model').jar

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs = [ '-parameters', '-Xlint:all', '-Xlint:-processing', '-Xlint:-serial']
}

compileTestJava {
    options.compilerArgs += '-parameters'
}

dependencies {
    compile 'org.projectlombok:lombok:1.18.4'
    annotationProcessor "org.projectlombok:lombok:1.18.4"

    annotationProcessor "io.micronaut:micronaut-security"
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"

    compile "com.xebia:jackson-lombok:1.1"

    compile "io.micronaut:micronaut-security-session"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-inject-java"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-views"
    compile "io.micronaut:micronaut-multitenancy"
    compile "org.glassfish.main.external:jmxremote_optional-repackaged:5.0"

    compile "io.micronaut:micronaut-management"
    compile 'io.micronaut.configuration:micronaut-micrometer-registry-prometheus'

    compile "io.micronaut.configuration:micronaut-cassandra"


    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    compile "javax.annotation:javax.annotation-api"

    compile "io.swagger.core.v3:swagger-annotations"

    compile "com.github.akarnokd:rxjava2-interop:0.13.5"

    compile "io.micronaut:micronaut-security-jwt"

    compile "io.kubernetes:client-java:6.0.1"
    compile "javax.inject:javax.inject:1"
    runtime "ch.qos.logback:logback-classic:1.2.3"

    compile("com.strapdata.elasticsearch.plugin.enterprise:strapdata-license:$javaElassandraVersion") {
        exclude group: 'com.strapdata.elasticsearch', module: 'elasticsearch'
    }

    compile project(':java:model')
    compile project(':java:backup')
    compile project(':java:k8s-addons')
    compile project(':java:driver-addons')

    testCompile "org.mockito:mockito-core:2.+"
}
