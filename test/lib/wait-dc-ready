#!/usr/bin/env bash

cd `dirname "$BASH_SOURCE"`/../..
source test/config

dc_name=${1:-${DEFAULT_NAME}}
replicas=${2:-1}

is_pod_ready() {
  [[ "$(kubectl get po "$1" -o 'jsonpath={.status.conditions[?(@.type=="Ready")].status}')" == 'True' ]]
}

wait_pod_ready(){
  for ((i=800; i>=1; i--)); do
    echo "waiting for pod $1 to be ready (#$i)"
    kubectl get pods
    is_pod_ready $1 && return 0
    sleep 1
  done
  return 1
}

is_dc_ready() {
  if ! [[ "$(kubectl get edc "$1" -o 'jsonpath={.status.replicas}')" == "${replicas}" ]] ||
     ! [[ "$(kubectl get edc "$1" -o 'jsonpath={.status.readyReplicas}')" == "${replicas}" ]] ||
     ! [[ "$(kubectl get edc "$1" -o 'jsonpath={.status.joinedReplicas}')" == "${replicas}" ]] ||
     ! [[ "$(kubectl get edc "$1" -o 'jsonpath={.status.phase}')" == 'RUNNING' ]]; then
    return 1;
  fi
  if [[ "$AUTHENTICATION" == 'CASSANDRA' ]]; then
    [[ "$(kubectl get edc "$1" -o 'jsonpath={.status.credentialsStatus.managed}')" == 'true' ]]
  fi
}

wait_dc_ready(){
  for ((i=900; i>=1; i--)); do
    echo "waiting for dc $1 to be ready (#$i)"
    kubectl get pod
    is_dc_ready $1 && return 0
    sleep 1
  done
  return 1
}


# TODO: consistent naming

for ((x=0; x<${replicas}; x++)); do
#  wait_pod_ready $(./test/lib/get-pod-name ${dc_name} ${x})
   wait_dc_ready $(./test/lib/get-name-prefix ${dc_name})
done

